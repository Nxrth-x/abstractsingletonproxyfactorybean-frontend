schema {
  query: Query
  mutation: Mutation
}

scalar Date

scalar GenericScalar

type LessonType {
  id: UUID!
  subject: SubjectType!
  schedule: String!
  weekDay: LessonWeekday!
}

enum LessonWeekday {
  SEG
  TER
  QUA
  QUI
  SEX
}

type Mutation {
  tokenAuth(username: String!, password: String!): ObtainJSONWebToken
  verifyToken(token: String): Verify
  refreshToken(token: String): Refresh
  register(
    firstName: String!
    lastName: String!
    password: String!
    username: String!
  ): RegisterMutation
}

type NoticeType {
  id: UUID!
  title: String!
  text: String!
  subject: SubjectType!
}

type ObtainJSONWebToken {
  payload: GenericScalar!
  refreshExpiresIn: Int!
  token: String!
}

type Query {
  allNotices: [NoticeType]
  notice(uuid: UUID!): NoticeType
  allResources: [ResourceType]
  resource(uuid: UUID!): ResourceType
  allSubjects: [SubjectType]
  subject(uuid: UUID!): SubjectType
  allTeachers: [TeacherType]
  teacher(uuid: UUID!): TeacherType
  allTasks: [TaskType]
  task(uuid: UUID!): TaskType
  allLessons: [LessonType]
  lesson(uuid: UUID!): LessonType
  lessonByDay(day: String!): [LessonType]
}

type Refresh {
  payload: GenericScalar!
  refreshExpiresIn: Int!
  token: String!
}

type RegisterMutation {
  username: String!
  firstName: String!
  lastName: String!
}

type ResourceType {
  id: UUID!
  name: String!
  description: String!
  url: String!
  subject: SubjectType!
}

type SubjectType {
  id: UUID!
  name: String!
  description: String!
  teacher: TeacherType!
  lessonSet: [LessonType!]!
  resourceSet: [ResourceType!]!
  noticeSet: [NoticeType!]!
}

type TaskType {
  id: UUID!
  title: String!
  description: String!
  attachments: String!
  teacher: TeacherType!
  dueDate: Date!
}

type TeacherType {
  id: UUID!
  name: String!
  imageUrl: String!
  email: String!
  about: String!
  taskSet: [TaskType!]!
  subjectSet: [SubjectType!]!
}

scalar UUID

type Verify {
  payload: GenericScalar!
}
